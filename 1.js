console.log("Завдання: 1 ==============================");

// Функція task1 не приймає жодних аргументів
function task1() {
  function getData(data, timeout = 2000) {
    // Повертаємо новий проміс
    return new Promise((resolve, reject) => {
      // За допомогою setTimeout симулюємо затримку timeout, яка виникає при роботі з асинхронними джерелами даних
      setTimeout(() => {
        // Якщо об'єкт не пустий, викликаємо resolve з даними
        if (data && Object.keys(data).length > 0) {
          resolve(data);
        } else {
          // Якщо об'єкт пустий, викликаємо reject з новим об'єктом Error("Об'єкт пустий")
          reject(new Error("Об'єкт пустий"));
        }
      }, timeout);
    });
  }

  // Ми викликаємо getData з об'єктом { name: "John", age: 30, city: "New York" } і часом очікування 2000

  // Ми обробляємо дані, повернуті промісом
  getData({ name: "John", age: 30, city: "New York" })
    .then((result) => {
      // У разі успіху виводимо в консоль дані
      console.log("Отримані дані:", result);
    })
    .catch((error) => {
      // У разі помилки виводимо повідомлення про помилку
      console.error("Помилка:", error.message);
    })
    .finally(() => {
      // Незалежно від того, чи завершилось виконання проміса успіхом чи ні, виводимо в консоль "Завдання 1 завершено"
      console.log("Завдання 1 завершено");
    });

  // Ми викликаємо getData з об'єктом { name: "John", age: 30, city: "New York" } і часом очікування 2000

  // Ми обробляємо дані, повернуті промісом
  // У разі успіху виводимо в консоль дані
  // У разі помилки виводимо повідомлення помилки
  // Незалежно від того, завершилось виконання проміса успіхом чи ні виводимо в консоль "Завдання 1 завершено"
}

// Викликаємо функцію task1
task1();
